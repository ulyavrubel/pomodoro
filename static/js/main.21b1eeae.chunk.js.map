{"version":3,"sources":["PomodoroClock.js","secondsToTime.js","App.js","serviceWorker.js","index.js"],"names":["PomodoroClock","useState","breakLength","setBreakLength","sessionLength","setSessionLength","text","setText","running","setRunning","seconds","setSeconds","beep","React","createRef","calculateSecondsLeft","length","label","handleDecrement","setLength","handleIncrement","useEffect","interval","current","play","setInterval","prevSeconds","clearInterval","timeLeft","minutes","divisor_for_minutes","mm","Math","floor","divisor_for_seconds","ss","ceil","secondsToTime","progress","id","animate","animationDuration","responsive","size","lineWidth","progressColor","bgColor","textColor","textStyle","font","percentSpacing","roundedStroke","showPercentage","showPercentageSymbol","ref","preload","src","type","className","onClick","pause","currentTime","href","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.21b1eeae.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { secondsToTime } from \"./secondsToTime\";\r\nimport Circle from \"react-circle\";\r\n\r\nfunction PomodoroClock() {\r\n  const [breakLength, setBreakLength] = useState(5);\r\n  const [sessionLength, setSessionLength] = useState(25);\r\n  const [text, setText] = useState(\"Session\");\r\n  const [running, setRunning] = useState(false);\r\n  const [seconds, setSeconds] = useState(25 * 60);\r\n\r\n  const beep = React.createRef();\r\n\r\n  function reset() {\r\n    setBreakLength(5);\r\n    setSessionLength(25);\r\n    setText(\"Session\");\r\n    setSeconds(25 * 60);\r\n    setRunning(false);\r\n    beep.current.pause();\r\n    beep.current.currentTime = 0;\r\n  }\r\n\r\n  function calculateSecondsLeft(length, label) {\r\n    if (!running) {\r\n      if (label === text) {\r\n        setSeconds(length * 60);\r\n      }\r\n    }\r\n  }\r\n\r\n  function handleDecrement(length, setLength, label) {\r\n    if (length > 1) {\r\n      setLength(length - 1);\r\n      calculateSecondsLeft(length - 1, label);\r\n    }\r\n  }\r\n\r\n  function handleIncrement(length, setLength, label) {\r\n    if (length < 60) {\r\n      setLength(length + 1);\r\n      calculateSecondsLeft(length + 1, label);\r\n    }\r\n  }\r\n\r\n  function toggleRunning() {\r\n    setRunning(!running);\r\n  }\r\n\r\n  function changeTimer() {\r\n    setSeconds(text === \"Session\" ? breakLength * 60 : sessionLength * 60);\r\n    setText(text === \"Session\" ? \"Break\" : \"Session\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    let interval = null;\r\n    if (running) {\r\n      if (seconds === 0) {\r\n        beep.current.play();\r\n        changeTimer();\r\n      }\r\n      interval = setInterval(() => {\r\n        setSeconds(prevSeconds => prevSeconds - 1);\r\n      }, 1000);\r\n    } else if (!running && seconds !== 0) {\r\n      clearInterval(interval);\r\n    }\r\n    return () => clearInterval(interval);\r\n  }, [running, seconds]);\r\n\r\n  const timeLeft = secondsToTime(seconds);\r\n  const progress =\r\n    text === \"Session\"\r\n      ? seconds / (sessionLength * 60)\r\n      : seconds / (breakLength * 60);\r\n\r\n  return (\r\n    <div>\r\n      {\" \"}\r\n      <header>\r\n        <h1>Pomodoro Clock</h1>\r\n      </header>\r\n      <div id=\"clock\">\r\n        <div id=\"timer\">\r\n          <Circle\r\n            id=\"circle\"\r\n            animate={false} // Boolean: Animated/Static progress\r\n            animationDuration=\"1s\" // String: Length of animation\r\n            responsive={true} // Boolean: Make SVG adapt to parent size\r\n            size=\"80vh\" // String: Defines the size of the circle.\r\n            lineWidth=\"3\" // String: Defines the thickness of the circle's stroke.\r\n            progress={progress * 100} // String: Update to change the progress and percentage.\r\n            progressColor=\"white\" // String: Color of \"progress\" portion of circle.\r\n            bgColor=\"rgb(50, 50, 50)\" // String: Color of \"empty\" portion of circle.\r\n            textColor=\"#6b778c\" // String: Color of percentage text color.\r\n            textStyle={{\r\n              font: \"bold 4rem Helvetica, Arial, sans-serif\" // CSSProperties: Custom styling for percentage.\r\n            }}\r\n            percentSpacing={10} // Number: Adjust spacing of \"%\" symbol and number.\r\n            roundedStroke={false} // Boolean: Rounded/Flat line ends\r\n            showPercentage={false} // Boolean: Show/hide percentage.\r\n            showPercentageSymbol={false} // Boolean: Show/hide only the \"%\" symbol.\r\n          />\r\n\r\n          <audio id=\"beep\" ref={beep} preload=\"auto\">\r\n            <source\r\n              src=\"http://soundbible.com/mp3/Intruder%20Alert-SoundBible.com-867759995.mp3\"\r\n              type=\"audio/mpeg\"\r\n            ></source>\r\n          </audio>\r\n        </div>\r\n\r\n        <div id=\"controls\">\r\n          <div id=\"session\" className=\"session-break\">\r\n            <div id=\"session-label\" className=\"session-break-label\">\r\n              <span>Session Length</span>\r\n            </div>\r\n\r\n            <div\r\n              className=\"decrement\"\r\n              id=\"session-decrement\"\r\n              onClick={() =>\r\n                handleDecrement(sessionLength, setSessionLength, \"Session\")\r\n              }\r\n            ></div>\r\n            <span id=\"session-length\" className=\"session-break-length\">\r\n              {sessionLength}\r\n            </span>\r\n            <div\r\n              className=\"increment\"\r\n              id=\"session-increment\"\r\n              onClick={() =>\r\n                handleIncrement(sessionLength, setSessionLength, \"Session\")\r\n              }\r\n            ></div>\r\n          </div>\r\n          <div id=\"inside-circle\">\r\n            <span id=\"timer-label\">{text}</span>\r\n\r\n            <span id=\"time-left\">\r\n              {timeLeft.minutes + \":\" + timeLeft.seconds}\r\n            </span>\r\n            <div id=\"inside-circle-buttons\">\r\n              <div\r\n                id=\"start_stop\"\r\n                onClick={toggleRunning}\r\n                className={running ? \"pause\" : \"start\"}\r\n              ></div>\r\n\r\n              <div id=\"reset\" onClick={reset}></div>\r\n            </div>\r\n          </div>\r\n          <div id=\"break\" className=\"session-break\">\r\n            <div id=\"break-label\" className=\"session-break-label\">\r\n              <span>Break Length</span>\r\n            </div>\r\n\r\n            <div\r\n              className=\"decrement\"\r\n              id=\"break-decrement\"\r\n              onClick={() =>\r\n                handleDecrement(breakLength, setBreakLength, \"Break\")\r\n              }\r\n            ></div>\r\n            <span id=\"break-length\" className=\"session-break-length\">\r\n              {breakLength}\r\n            </span>\r\n\r\n            <div\r\n              className=\"increment\"\r\n              id=\"break-increment\"\r\n              onClick={() =>\r\n                handleIncrement(breakLength, setBreakLength, \"Break\")\r\n              }\r\n            ></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <footer>\r\n        <h5>\r\n          Created by <a href=\"https://github.com/ulyavrubel/\">Ulyana Sichkar</a>\r\n        </h5>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PomodoroClock;\r\n","export function secondsToTime(seconds) {\r\n  if (seconds === 3600) {\r\n    return {\r\n      minutes: 60,\r\n      seconds: \"00\"\r\n    };\r\n  }\r\n  let divisor_for_minutes = seconds % (60 * 60);\r\n  let mm = Math.floor(divisor_for_minutes / 60);\r\n\r\n  let divisor_for_seconds = divisor_for_minutes % 60;\r\n  let ss = Math.ceil(divisor_for_seconds);\r\n  if (mm < 10) {\r\n    mm = \"0\" + mm;\r\n  }\r\n  if (ss < 10) {\r\n    ss = \"0\" + ss;\r\n  }\r\n  let time = {\r\n    minutes: mm,\r\n    seconds: ss\r\n  };\r\n  return time;\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport PomodoroClock from \"./PomodoroClock\";\r\n\r\nfunction App() {\r\n  return <PomodoroClock />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}